import streamlit as st
from PIL import Image
from bs4 import BeautifulSoup as soup
from urllib.request import urlopen
from newspaper import Article
import nltk
from transformers import pipeline
import re
import requests
import os


#   cd InNews                      python -m streamlit run App.py
# Gerekli kÃ¼tÃ¼phaneleri indir
nltk.download('punkt')

# Sayfa ayarlarÄ±
st.set_page_config(
    page_title='InNews ğŸ‡¹ğŸ‡· - Ã–zetlenmiÅŸ Haber Platformu',
    page_icon='./Meta/newspaper.ico',
    layout="centered"
)

# Sayfa stil ayarlarÄ± (renkler ve fontlar)
st.markdown("""
    <style>
    .stApp {
        background: linear-gradient(to right, #004e92, #000428);
        color: white;
    }
    .title {
        font-size: 45px;
        font-weight: bold;
        text-align: center;
        color: #FFD700;
        text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5);
        margin-top: 20px;
    }
    .publish-date {
        color: #00FF00;
        font-size: 14px;
    }
    </style>
""", unsafe_allow_html=True)

# Ã–zetleme modeli
ozetleyici = pipeline("summarization")

# Haber RSS kaynaklarÄ±nÄ± Ã§ekme
def haberleri_getir_kategoriye_gore(kategori):
    url = f'https://news.google.com/news/rss/headlines/section/topic/{kategori}'
    sayfa = urlopen(url).read()
    veri = soup(sayfa, 'xml')
    return veri.find_all('item')

def haberleri_getir_aranan_konu(konu):
    url = f'https://news.google.com/rss/search?q={konu}'
    sayfa = urlopen(url).read()
    veri = soup(sayfa, 'xml')
    return veri.find_all('item')

def haberleri_getir_trending():
    url = 'https://news.google.com/news/rss'
    sayfa = urlopen(url).read()
    veri = soup(sayfa, 'xml')
    return veri.find_all('item')

# Haber baÅŸlÄ±ÄŸÄ±na gÃ¶re uygun gÃ¶rseli gÃ¶ster
def kategori_gorseli_goster(kategori):
    try:
        kategori = kategori.lower()
        dosya_yolu = f'./Meta/{kategori}.jpg'
        if os.path.exists(dosya_yolu):
            st.image(dosya_yolu, use_container_width=False)
        else:
            st.image('./Meta/default_news.jpg', use_container_width=False)
    except Exception as e:
        st.error(f"GÃ¶rsel yÃ¼klenemedi: {e}")

# Temizlik ve Ã¶zetleme
def metin_temizle(metin):
    metin = re.sub(r'<.*?>', '', metin)
    metin = re.sub(r'\d+', '', metin)
    metin = re.sub(r'[^\w\s]', '', metin)
    metin = re.sub(r'\s+', ' ', metin)
    return metin

def metni_ozetle(metin):
    try:
        temiz_metin = metin_temizle(metin)
        ozet = ozetleyici(temiz_metin, max_length=150, min_length=50, do_sample=False)
        return ozet[0]['summary_text']
    except Exception as e:
        st.error(f"Ã–zetleme hatasÄ±: {e}")
        return None

# Haberleri ekrana yazdÄ±r
def haberleri_goster(haber_listesi, adet, kategori='default'):
    sayac = 0
    for haber in haber_listesi:
        sayac += 1
        st.write(f'### ({sayac}) {haber.title.text}')
        
        kategori_gorseli_goster(kategori)

        makale = Article(haber.link.text)
        try:
            makale.download()
            makale.parse()
            makale.nlp()
        except Exception as e:
            st.error(f"Haber analiz hatasÄ±: {e}")
            continue

        with st.expander(haber.title.text):
            st.markdown(f'<p style="text-align: justify; font-size: 16px;">{makale.summary}</p>', unsafe_allow_html=True)
            st.markdown(f"[Haberi TamamÄ±nÄ± Oku]({haber.link.text})")
        st.markdown(f'<p class="publish-date">YayÄ±n Tarihi: {haber.pubDate.text}</p>', unsafe_allow_html=True)

        if sayac >= adet:
            break

# Ana uygulama
def calistir():
    st.markdown('<h1 class="title"> InNews: Ã–zetlenmiÅŸ Haber Platformu</h1>', unsafe_allow_html=True)
    st.image("Meta/newspaper.jpg")
    st.markdown("---")

    secenekler = ['--Kategori SeÃ§--', ' GÃ¼ndem Haberleri', ' Favori KonularÄ±m', ' Konu Ara', ' Metin Ã–zetle']
    secim = st.selectbox("Bir kategori seÃ§in:", secenekler)

    if secim == secenekler[0]:
        st.warning("LÃ¼tfen bir kategori seÃ§in!")

    elif secim == secenekler[1]:
        st.subheader(" GÃ¼ndem Haberleri")
        adet = st.slider('KaÃ§ haber gÃ¶sterilsin?', min_value=5, max_value=25, step=1)
        haberler = haberleri_getir_trending()
        haberleri_goster(haberler, adet, kategori="Trending")

    elif secim == secenekler[2]:
        konular = ['Birini SeÃ§in', 'WORLD', 'NATION', 'BUSINESS', 'TECHNOLOGY', 'ENTERTAINMENT', 'SPORTS', 'SCIENCE', 'HEALTH']
        st.subheader(" Favori Konunuzu SeÃ§in")
        secilen_konu = st.selectbox("Konu SeÃ§in", konular)
        if secilen_konu != konular[0]:
            adet = st.slider('KaÃ§ haber gÃ¶sterilsin?', min_value=5, max_value=25, step=1)
            haberler = haberleri_getir_kategoriye_gore(secilen_konu)
            haberleri_goster(haberler, adet, kategori=secilen_konu)

    elif secim == secenekler[3]:
        arama = st.text_input(" Aramak istediÄŸiniz konuyu yazÄ±n:")
        adet = st.slider('KaÃ§ haber gÃ¶sterilsin?', min_value=5, max_value=15, step=1)
        if st.button("Ara") and arama:
            haberler = haberleri_getir_aranan_konu(arama)
            haberleri_goster(haberler, adet, kategori=arama)

    elif secim == secenekler[4]:
        st.subheader(" Metin Girin ve Ã–zetleyin")
        metin = st.text_area("Metni buraya yapÄ±ÅŸtÄ±rÄ±n", height=300)
        if st.button("Ã–zetle"):
            ozet = metni_ozetle(metin)
            if ozet:
                st.write("### Ã–zet:")
                st.success(ozet)

# UygulamayÄ± Ã§alÄ±ÅŸtÄ±r
calistir()
